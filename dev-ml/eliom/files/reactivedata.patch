Index: eliom-5.0.0/src/lib/eliom_shared.eliom
===================================================================
--- eliom-5.0.0.orig/src/lib/eliom_shared.eliom
+++ eliom-5.0.0/src/lib/eliom_shared.eliom
@@ -288,7 +288,7 @@ module FakeReactiveData = struct
     val concat : 'a t -> 'a t -> 'a t
     val value : 'a t -> 'a list
     val synced : 'a t -> bool
-    val signal : 'a t -> 'a list FakeReact.S.t
+    val signal : ?eq:('a -> 'a -> bool) -> 'a t -> 'a list FakeReact.S.t
     val singleton_s : 'a FakeReact.S.t -> 'a t
     val map : ('a -> 'b) -> 'a t -> 'b t
     val from_signal :
@@ -304,7 +304,7 @@ module FakeReactiveData = struct
     let singleton_s s = [FakeReact.S.value s], FakeReact.S.synced s
     let value (l, _) = l
     let synced (_, b) = b
-    let signal (l, synced) = fst (FakeReact.S.create ~synced l)
+    let signal ?eq (l, synced) = fst (FakeReact.S.create ~synced l)
     let map f (l, b) = List.map f l, b
     let from_signal ?eq s = FakeReact.S.(value s, synced s)
     module Lwt = struct
@@ -635,7 +635,7 @@ module ReactiveData = struct
     let value (s : 'a t) = {shared# 'a list {
       FakeReactiveData.RList.value (Value.local %s) }}
 
-    let signal (s : 'a t) = {shared# 'a list FakeReact.S.t {
+    let signal ?eq (s : 'a t) = {shared# 'a list FakeReact.S.t {
       FakeReactiveData.RList.signal (Value.local %s) }}
 
     let map f s = {shared# 'a FakeReactiveData.RList.t {
Index: eliom-5.0.0/src/lib/eliom_shared_sigs.shared.mli
===================================================================
--- eliom-5.0.0.orig/src/lib/eliom_shared_sigs.shared.mli
+++ eliom-5.0.0/src/lib/eliom_shared_sigs.shared.mli
@@ -143,7 +143,7 @@ module type RLIST = sig
 
   val concat : 'a t -> 'a t -> 'a t
   val value : 'a t -> 'a list Eliom_lib.shared_value
-  val signal : 'a t -> 'a list signal
+  val signal : ?eq:(('a -> 'a -> bool)) -> 'a t -> 'a list signal
   val singleton_s : 'a signal -> 'a t
   val map : ('a -> 'b) Eliom_lib.shared_value -> 'a t -> 'b t
   val from_signal :
